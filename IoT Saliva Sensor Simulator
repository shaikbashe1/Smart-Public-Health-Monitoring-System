#include <WiFi.h>
#include <PubSubClient.h> 
#include <ArduinoJson.h>  

// =========================================================
// !!! CRITICAL: REPLACE THESE CONFIGURATION VALUES !!!
// =========================================================
const char* ssid = "YOUR_WIFI_SSID";
const char* password = "YOUR_WIFI_PASSWORD";
// Use the IP address of the machine running cloud_server.py and the MQTT broker
const char* mqtt_server = "YOUR_MQTT_BROKER_IP"; 
const char* mqtt_topic = "pediatric/saliva/data";
// Unique ID for this device (e.g., Patient ID)
const char* device_id = "ChildMonitor_A001"; 
// =========================================================

WiFiClient espClient;
PubSubClient client(espClient);
long lastDataTime = 0;

void setup_wifi() {
    delay(10);
    Serial.print("Connecting to ");
    Serial.println(ssid);
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("\nWiFi connected. IP: ");
    Serial.println(WiFi.localIP());
}

void reconnect_mqtt() {
    while (!client.connected()) {
        Serial.print("Attempting MQTT connection...");
        if (client.connect(device_id)) {
            Serial.println("connected");
        } else {
            Serial.print("failed, rc=");
            Serial.print(client.state());
            Serial.println(" trying again in 5 seconds");
            delay(5000);
        }
    }
}

void setup() {
    Serial.begin(115200);
    setup_wifi();
    client.setServer(mqtt_server, 1883); // Default MQTT port
}

void loop() {
    if (!client.connected()) {
        reconnect_mqtt();
    }
    client.loop();

    if (millis() - lastDataTime > 10000) { // Send data every 10 seconds
        lastDataTime = millis();

        // --- SIMULATE SALIVA BIOMARKER READINGS ---
        // Normal ranges: pH 6.7 to 7.4. Amylase 50 to 150 U/L.
        float salivaryPH = random(670, 740) / 100.0; 
        int amylaseLevel = random(50, 150);          

        // 10% chance to simulate a CRITICAL (abnormal) reading for the demo
        if (random(0, 10) == 0) { 
            salivaryPH = random(550, 650) / 100.0; // Low pH simulation
            amylaseLevel = random(200, 450);       // High amylase simulation
            Serial.println(">>> ALERT SIMULATION: ABNORMAL READINGS GENERATED <<<");
        }

        // --- Create JSON Payload ---
        StaticJsonDocument<300> doc;
        doc["deviceId"] = device_id;
        doc["timestamp"] = millis() / 1000;
        doc["salivaryPH"] = salivaryPH;
        doc["amylaseLevel"] = amylaseLevel;
        doc["location"] = "Childcare Center - Zone B"; 

        char jsonBuffer[300];
        serializeJson(doc, jsonBuffer);

        Serial.print("Publishing: ");
        Serial.println(jsonBuffer);
        client.publish(mqtt_topic, jsonBuffer);
    }
}
